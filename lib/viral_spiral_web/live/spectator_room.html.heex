<div id="spectator-room-container" phx-hook="HookSpectatorRoom" class="relative">
  <div class="w-full">
    <Atoms.background id="container-bg" image={bg_image(get_in(@state.room.chaos))} />
  </div>

  <div class="relative w-full min-h-[calc(100vh-56px)] flex flex-col">
    <div :if={@state && @state.room} class="p-2 flex flex-row mb mt ">
      <div class="flex flex-col gap-1">
        <p class="bg-fuchsia-950 p-2 rounded-xl text-fuchsia-100">
          <%= @state.room.name %> (Spectating)
        </p>
        <%= if @state.current_holder_name do %>
          <p class="bg-[#728645] p-4 rounded-2xl text-fuchsia-100 text-lg font-medium shadow-md">
            <%= @state.current_holder_name %>
          </p>
        <% end %>
      </div>

      <div class="flex-1"></div>
      <div class="shrink-0">
        <p class="bg-fuchsia-950 p-2 rounded-lg text-fuchsia-100">
          <%= 10 - @state.room.chaos %>
        </p>
      </div>
    </div>

    <div :if={@state && @state.all_players} id="container-others" class="gap-2 flex flex-wrap justify-center">
      <%# <.carousel_score_card players={@state.all_players} /> %>
      <%=for player <- @state.all_players do %>
      <div class = {if player.id == @state.current_turn_player.id, do: "border-amber-400 border-4 rounded-lg"}><.player_score_card player={player} /></div>
      <% end %>
    </div>

    <div
      :if={@state && @state.current_cards}
      id="container-cards"
      class="flex-1 mt-8 2xl:mt-12 flex justify-center"
    >
      <div :for={card <- @state.current_cards}>
        <.card
          card={card}
          from={@state.current_turn_player.id}
          can_turn_fake={false}
          can_use_power={false}
          in_spec_mode={true}
        />
      </div>
    </div>

    <div class="flex flex-wrap mx-auto gap-2 mb-4 justify-center">

    </div>
  </div>
</div> 